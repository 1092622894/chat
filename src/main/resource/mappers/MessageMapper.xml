<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzq.dao.MessageDao">
    <resultMap id="BaseResultMap" type="com.hzq.domain.Message">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="message_content" jdbcType="VARCHAR" property="messageContent" />
        <result column="message_status" jdbcType="INTEGER" property="messageStatus" />
        <result column="message_type" jdbcType="INTEGER" property="messageType"/>
        <result column="message_from_id" jdbcType="INTEGER" property="messageFromId"/>
        <result column="message_to_id" jdbcType="INTEGER" property="messageToId"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,message_content,message_status,message_type,message_from_id,message_to_id,gmt_create,user_id
    </sql>

<insert id="insert" useGeneratedKeys="true" keyProperty="msg.id">
    insert into message (
     message_content, message_status, message_type, message_from_id,message_to_id, user_id
    )
    values (
      #{msg.message, jdbcType = VARCHAR}, #{messageStatus, jdbcType = INTEGER}, #{msg.messageType, jdbcType = INTEGER},
    #{msg.fromId, jdbcType = INTEGER}, #{msg.toIdOrGroupId, jdbcType = INTEGER }, #{userId, jdbcType = INTEGER}
    )
</insert>

    <select id="queryMessageByUserIdAndFriendId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from message where (
        (
        message_from_id = #{userId, jdbcType = INTEGER}
        and
        message_to_id = #{friendId, jdbcType = INTEGER}
        )
        or
        (
        message_to_id = #{userId, jdbcType = INTEGER}
        and
        message_from_id = #{friendId, jdbcType = INTEGER}
        )
        )
    </select>

<update id="updateOneMessage" parameterType="java.lang.Integer">
    update message set message_status = #{messageStatus, jdbcType = INTEGER}
    where id = #{id, jdbcType = INTEGER}
</update>

<update id="update" parameterType="java.lang.Integer">
    update message set message_status = #{messageStatus, jdbcType = INTEGER}
    where (id between #{smallId, jdbcType = INTEGER} and  #{bigId, jdbcType = INTEGER})
    and user_id = #{userId, jdbcType = INTEGER}
</update>

<delete id="deleteMessageById" parameterType="java.lang.Integer">
    delete from message where id = #{id, jdbcType = INTEGER}
</delete>

<delete id="deleteMessageByUserIdAndFriendId" parameterType="java.lang.Integer">
    delete from message
    where user_id = #{userId, jdbcType = INTEGER}
    and ( message_from_id = #{friendId, jdbcType = INTEGER} or message_to_id = #{friendId, jdbcType = INTEGER})
</delete>


    <resultMap id="SendMessageMap" type="com.hzq.vo.SendMessage">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="message_content" jdbcType="VARCHAR" property="message" />
        <result column="message_type" jdbcType="INTEGER" property="messageType"/>
        <result column="message_from_id" jdbcType="INTEGER" property="fromId"/>
        <result column="message_to_id" jdbcType="INTEGER" property="toIdOrGroupId"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="nickname" jdbcType="VARCHAR" property="name"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
    </resultMap>

    <sql id="SendMessage_List">
         m.id, m.message_content, m.message_type, m.message_from_id, m.message_to_id, m.gmt_create, nickname, avatar
    </sql>

    <select id="selectUnReadSendMessage" parameterType="java.lang.Integer" resultMap="SendMessageMap">
        select <include refid="SendMessage_List"/>
        from user_info ui
        left join message m
        on m.message_from_id = ui.user_id
        where m.message_status = #{messageStatus, jdbcType = INTEGER}
        and m.message_to_id = #{userId, jdbcType = INTEGER}
        and m.user_id = #{userId, jdbcType = INTEGER}
    </select>
</mapper>