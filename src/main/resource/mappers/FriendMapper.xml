<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzq.dao.FriendDao">
    <resultMap id="BaseResultMap" type="com.hzq.domain.Friend">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="friend_name" jdbcType="VARCHAR" property="friendName" />
        <result column="friend_group" jdbcType="VARCHAR" property="friendGroup"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="friend_id" jdbcType="INTEGER" property="friendId"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
        <result column="is_delete" jdbcType="INTEGER" property="isDelete" />
    </resultMap>

    <resultMap id="FriendVoMap" type="com.hzq.vo.FriendVo">
        <result column="friend_name" jdbcType="VARCHAR" property="friendName" />
        <result column="friend_group" jdbcType="VARCHAR" property="friendGroup"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="friend_id" jdbcType="INTEGER" property="friendId"/>
        <result column="is_delete" jdbcType="INTEGER" property="isDelete" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="sign" jdbcType="VARCHAR" property="sign"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    </resultMap>

    <sql id="Base_Column_List">
     f.friend_name, f.friend_group, f.user_id, f.friend_id, f.is_delete
    </sql>

<insert id="insert" parameterType="com.hzq.domain.Friend"  useGeneratedKeys="true" keyProperty="id">
    insert into friend (friend_name, user_id, friend_id)
    values (#{friendName, jdbcType = VARCHAR}, #{userId, jdbcType = INTEGER},#{friendId, jdbcType = INTEGER});

    insert into friend (friend_name, user_id, friend_id)
    select u.username,f.friend_id,u.id
    from user u left join friend
    on f.user_id = u.id
    where f.user_id = #{friendId, jdbcType = INTEGER}
    adn f.friend_id = #{userId, jdbcType = INTEGER}
</insert>

<update id="update" parameterType="com.hzq.domain.Friend">
    update friend
    <set>
       <if test="friendName != null">
           friend_name = #{friendName, jdbcType = VARCHAR},
       </if>
       <if test="friendGroup != null">
           friend_group = #{friendGroup, jdbcType = VARCHAR},
       </if>
       <if test="isDelete != null">
           is_delete = #{isDelete, jdbcType = VARCHAR}
       </if>
    </set>
    <where>
        user_id = #{userId, jdbcType = INTEGER} AND friend_id = #{friendId, jdbcType = INTEGER}
    </where>
</update>

<delete id="delete" parameterType="java.lang.Integer">
    delete from friend
    <where>
        friend_id = #{friendId, jdbcType = INTEGER}
        and
        user_id = #{userId, jdbcType = INTEGER}
    </where>

    update friend set is_delete = #{userId,  jdbcType = INTEGER}
    where friend_id = #{userId, jdbcType = INTEGER} and user_id = #{friendId, jdbcType = INTEGER}
</delete>

<delete id="deleteById" parameterType="java.lang.Integer">
    delete from friend where user_id = #{userId, jdbcType = INTEGER};
</delete>

<select id="selectAll" parameterType="java.lang.Integer" resultMap="FriendVoMap">
    select <include refid="Base_Column_List" /> ,u.username,ui.sign ,ui.avatar
    from friend f left join user u
    on f.user_id = u.id
    left join user_info ui
    on ui.user_id = u.id
    where f.user_id = #{userId, jdbcType = INTEGER}
</select>

<select id="selectFriendByFriendName" resultMap="FriendVoMap">
    select <include refid="Base_Column_List" /> ,u.username,ui.sign ,ui.avatar from friend f left join user u on f.user_id = u.id
    left join user_info ui on ui.user_id = u.id
    <where>
        f.friend_name = #{friendName, jdbcType = VARCHAR}
        and
        f.user_id = #{userId, jdbcType = INTEGER}
    </where>
</select>

<select id="selectFriendByFriendId" resultMap="FriendVoMap">
    select <include refid="Base_Column_List" /> ,u.username,ui.sign ,ui.avatar from friend f left join user u on f.user_id = u.id
    left join user_info ui on ui.user_id = u.id
    <where>
        friend_id = #{friendId, jdbcType = INTEGER}
        and
        user_id = #{userId, jdbcType = INTEGER}
    </where>
</select>

</mapper>