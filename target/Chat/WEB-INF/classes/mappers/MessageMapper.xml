<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzq.dao.MessageDao">
    <resultMap id="BaseResultMap" type="com.hzq.domain.Message">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="message_content" jdbcType="VARCHAR" property="messageContent" />
        <result column="message_status" jdbcType="INTEGER" property="messageStatus" />
        <result column="message_group" jdbcType="VARCHAR" property="messageGroup"/>
        <result column="message_type" jdbcType="INTEGER" property="messageType"/>
        <result column="message_from_id" jdbcType="INTEGER" property="messageFromId"/>
        <result column="message_to_id" jdbcType="INTEGER" property="messageToId"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
    </resultMap>

<insert id="insert" parameterType="com.hzq.domain.Message"  useGeneratedKeys="true" keyProperty="id">
    insert into message (
    message_content, message_status, message_group, message_type, message_from_id,
    message_to_id, user_id
    )
    values ( #{messageContent, jdbcType = VARCHAR}, #{messageStatus, jdbcType = INTEGER}, #{messageGroup, jdbcType = VARCHAR},
            #{messageType, jdbcType = INTEGER}, #{messageFromId, jdbcType = INTEGER}, #{messageToId, jdbcType = INTEGER },
             #{userId, jdbcType = INTEGER}
    )
</insert>

<delete id="deleteMessageById" parameterType="java.lang.Integer">
    delete from message
    where id = #{id, jdbcType = INTEGER}
</delete>

<delete id="deleteAllByUserId" parameterType="java.lang.Integer">
    delete from message where user_id = #{userId, jdbcType = INTEGER}
</delete>

<delete id="deleteMessageByUserIdAndFriendId" parameterType="java.lang.Integer">
    delete from message
    where user_id = #{userId, jdbcType = INTEGER}
    and ( message_from_id = #{friendId, jdbcType = INTEGER} or message_to_id = #{friend, jdbcType = INTEGER})
</delete>


<select id="queryMessageByUserIdAndFriendId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from message where (
     (
     message_from_id = #{userId, jdbcType = INTEGER}
     and
     message_to_id = #{friendId, jdbcType = INTEGER}
     )
     or
     (
     message_to_id = #{userId, jdbcType = INTEGER}
     and
     message_from_id = #{friendId, jdbcType = INTEGER}
     )
     )


</select>

<select id="queryUnreadMessageByUserId" resultMap="BaseResultMap">
    select * from message where
    user_id = #{userId, jdbcType = INTEGER}
    and  message_status = #{messageStatus, jdbcType = INTEGER}
</select>

<update id="updateOneMessage" parameterType="java.lang.Integer">
    update message set message_status = #{read, jdbcType = INTEGER}
    where id = #{id, jdbcType = INTEGER}
</update>

<update id="update" parameterType="java.lang.Integer">
    update message set message_status = #{read, jdbcType = INTEGER}
    where (id between #{smallId, jdbcType = INTEGER} and  #{bigId, jdbcType = INTEGER})
    and user_id = #{userId, jdbcType = INTEGER}
</update>

</mapper>